
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Shanta
 */
public class Editor extends javax.swing.JFrame {

    /**
     * Creates new form Editor
     */
    //FilePath
    String filePath = null;
    String filename = null;
    String fileDir = null;
    public static String s = "";
    public String str = "";
    JFileChooser jF;
	private JMenuItem JMenuItem10;

    public Editor() {
        initComponents();
        setLocationRelativeTo(null);
        o.setEditable(false);
        t.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        t = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        o = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        JMenuItem10 = new javax.swing.JMenuItem();
        

        jLabel3.setText("jLabel3");

        jMenu6.setText("File");
        jMenuBar3.add(jMenu6);

        jMenu7.setText("Edit");
        jMenuBar3.add(jMenu7);

        jMenu8.setText("jMenu8");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        t.setColumns(20);
        t.setRows(5);
        jScrollPane1.setViewportView(t);

        o.setColumns(20);
        o.setRows(5);
        jScrollPane3.setViewportView(o);

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel1.setText("Output:");

        input.setColumns(20);
        input.setRows(5);
        jScrollPane2.setViewportView(input);

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel2.setText("Input:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );

        jMenu1.setText("File");

        jMenuItem2.setText("New");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Open");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Save");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Print");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem6.setText("Copy");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Cut");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setText("Paste");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Compiler");

        jMenuItem9.setText("Run as C");
        
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					jMenuItem9ActionPerformed(evt);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        JMenuItem10.setText("Run as Java");
        
        JMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        
        jMenu3.add(jMenuItem9);
        jMenu3.add(JMenuItem10);

        jMenuBar1.add(jMenu3);
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>         
    
    
    private String runCommands(String executable, List<String> commands) {
    	return runCommands(executable, commands, null);
    }
    
    private ArrayList<String> getInputs() {
    	String inputString = input.getText();
    	return new ArrayList<String>(Arrays.asList(inputString.split("\n")));
    }
    private ArrayList<String> getErrors(){
    	String errorString = o.getText();
    	return new ArrayList<String>(Arrays.asList(errorString.split("\n")));
    }
    
    
    private String runCommands(String executable, List<String> commands, String exit) {
    	try {
    		ProcessBuilder builder = new ProcessBuilder(executable);
    		builder.redirectErrorStream(true);
			Process process = builder.start();
			
			OutputStream stdin = process.getOutputStream();
			InputStream stderr = process.getErrorStream();
			InputStream stdout = process.getInputStream();
			
			BufferedReader reader = new BufferedReader(new InputStreamReader(stdout));
			BufferedReader error = new BufferedReader(new InputStreamReader(stderr));
			BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(stdin));
			_p("Before running command");
			if (exit != null) {
				commands.add(exit);
			}
			for(String command : commands) {
				writer.write(command + "\n");
				_p("Running command: " + command);
				writer.flush();
			}
			_p("Done sending commands");
			String line;
			while((line = reader.readLine()) != null) {
				str += line + "\n";
				_p("Read line: " + line);
			}
			_p("Line reading finished");
                        
                        while((line = error.readLine()) != null) {
				str += line + "\n";
				_p("Read error: " + line);
			}
                        
                        _p("Error reading finished");
                        
			// read error here if you want
			writer.close();
			reader.close(); // use error reader same like output reader
			process.destroy();
			return str;
    	} catch(Exception ex) {
    		System.out.println(ex.getMessage());
    		return str +"\n"+String.valueOf(ex);
    	}
    }
    
    private void _p(String t) {
    	System.out.println(t);
    }
   

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        t.setEditable(true);
        t.setText("");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        // Create an object of JFileChooser class 
        t.setEditable(true);
        
        JFileChooser j = new JFileChooser("c:");

        // Invoke the showsOpenDialog function to show the save dialog 
        int r = j.showOpenDialog(null);

        // If the user selects a file 
        if (r == JFileChooser.APPROVE_OPTION) {
            // Set the label to the path of the selected directory
            filePath = j.getSelectedFile().getAbsolutePath();
            filename = j.getSelectedFile().getName();
            fileDir = j.getSelectedFile().getParent();
            setTitle(filePath);
            File fi = new File(filePath);

            try {
                // String 
                String s1 = "", sl = "";

                // File reader 
                FileReader fr = new FileReader(fi);

                // Buffered reader 
                BufferedReader br = new BufferedReader(fr);

                // Initilize sl 
                sl = br.readLine();

                // Take the input from the file 
                while ((s1 = br.readLine()) != null) {
                    sl = sl + "\n" + s1;
                }

                // Set the text 
                t.setText(sl);
            } catch (Exception e1) {
                JOptionPane.showMessageDialog(null, e1.getMessage());
            }
        } // If the user cancelled the operation 
        else {
            JOptionPane.showMessageDialog(null, "the user cancelled the operation");
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:

        // Create an object of JFileChooser class 
         if(fileDir.equals(null))
        {
            jF = new JFileChooser("c:");
        }
        else
        {
            jF = new JFileChooser(fileDir);
        }
        
        //JFileChooser jF = new JFileChooser("c:");

        // Invoke the showsSaveDialog function to show the save dialog 
        int r = jF.showSaveDialog(null);

        if (r == JFileChooser.APPROVE_OPTION) {

            // Set the label to the path of the selected directory
            filePath = jF.getSelectedFile().getAbsolutePath();
            filename = jF.getSelectedFile().getName();
            setTitle(filePath);
            fileDir = jF.getSelectedFile().getParent();
            File fi = new File(filePath);

            try {
                // Create a file writer 
                FileWriter wr = new FileWriter(fi, false);

                // Create buffered writer to write 
                BufferedWriter w = new BufferedWriter(wr);

                // Write
                String ss = t.getText();
                ss.replaceAll("\n", "\r\n");
                w.write(ss);

                w.flush();
                w.close();
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(this, e2.getMessage());
            }
        } // If the user cancelled the operation 
        else {
            JOptionPane.showMessageDialog(this, "the user cancelled the operation");
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // Print button action:

        try {
            // print the file 
            t.print();
        } catch (Exception e3) {
            JOptionPane.showMessageDialog(this, e3.getMessage());
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // Copy button action:

        t.copy();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // Cut button action:
        t.cut();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // Paste button action:
        t.paste();
        o.setText("ahsgd");
    }//GEN-LAST:event_jMenuItem8ActionPerformed
    
    
    
    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) throws InterruptedException {                                           
        try {
            if (filename.contains(".c") || filename.contains(".cpp")) {
            	
            	String file = fileDir + "\\" + filename;
            	String executable = file.replace(".c", ".exe");
            	
            	List<String> compileCommands = new ArrayList<String>();
            	compileCommands.add("gcc " + file + " -o " + executable);
            	String compilationOutput = runCommands("cmd", compileCommands, "exit");
            	
            	_p(compilationOutput);
            	
            	List<String> inputs = getInputs();
            	String output = runCommands(executable, inputs);
            	List<String> errors = getErrors();
            	//String output = runCommands(executable, errors);
            	o.setText(output);
            	
            	_p(output);
            }
        
	    } catch (Exception ex) {
	    	_p(ex.getMessage());
	    }
    }
        
        private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        	   try {
                   if (filename.contains(".java")) {
                   	
                   	String file = fileDir + "\\" + filename;
                   	String executable = file.replace(".java", ".class");
                   	
                   	List<String> compileCommands = new ArrayList<String>();
                   	compileCommands.add("javac " + file + " java "  + executable);
                   	String compilationOutput = runCommands("cmd", compileCommands, "exit");
                   	
                   	_p(compilationOutput);
                   	
                   	List<String> inputs = getInputs();
                   	String output = runCommands(executable, inputs);
                   	List<String> errors = getErrors();
                   	//String output = runCommands(executable, errors);
                   	o.setText(output);
                   	
                   	_p(output);
                   }
               
       	    } catch (Exception ex) {
       	    	_p(ex.getMessage());
       	    }
           }
        	/*  try { 
                  if(filename.contains(".java"))
            {
                 Runtime.getRuntime().exec("cmd.exe /c start cmd /k jcc.bat \""+fileDir + "\\" + filename+"\"\\output.txt");
            }
                  else
                  {
                	  System.out.println("ERROR");
                  }

            

            //System.out.println("\""+fileDir+" -o "+fileDir.replace(".c", ".o")+"\"");
        } catch (IOException ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        } 
                catch (InterruptedException ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        
   //

      /*  o.setText("");
        Editor.s = "";
        String[] command
                = {
                    "cmd",};
        Process p;
        try {
            p = Runtime.getRuntime().exec(command);

            new Thread(new SyncPipe(p.getErrorStream(), System.err)).start();
            new Thread(new SyncPipe(p.getInputStream(), System.out)).start();
            PrintWriter stdin = new PrintWriter(p.getOutputStream());
            String cmd = "cd /d " + fileDir + "&&javac " + filename + "&&java " + filename.replace(".java", "") + " > " + filename.replace(".java", ".txt");
            //System.out.println(cmd);
            stdin.println(cmd);
            stdin.close();
            p.waitFor();

        } catch (Exception ee) {
            ee.printStackTrace();
        } finally {
            try {
                FileReader fr = new FileReader(fileDir + "" + filename.replace(".java", ".txt"));
                BufferedReader br = new BufferedReader(fr);

                String line = br.readLine();
                if (line == null) {
                    s += "Code May Has Error Dedug Your Code Please!!\nPossible Cause:\n1:Class and file name differ\n2:Syntax Error\n3:Other Errors";
                }
                while (line != null) {
                    s += line;
                    line = br.readLine();
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
                s += "Code May Has Error Dedug Your Code Please!!\nPossible Cause:\n1:Class and file name differ\n2:Syntax Error\n3:Other Errors";
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
                s += "Code May Has Error Dedug Your Code Please!!\nPossible Cause:\n1:Class and file name differ\n2:Syntax Error\n3:Other Errors";
            }
            o.setText(s);
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea input;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea o;
    public javax.swing.JTextArea t;
    // End of variables declaration//GEN-END:variables
	private BufferedReader error;
}
